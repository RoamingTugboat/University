*********************
				001
*********************


1	Zeichnen Sie alle Register der x86 CPU in ein Diagramm. Wie ist der Name für die 8-, 16- und 32-Bit Register?

		General Registers:
		
			32 bits:  EAX 		EBX 		ECX 		EDX
			16 bits:   AX 		 BX 		 CX 		 DX
			 8 bits:   AH AL 	 BH BL		 CH CL 		 DH DL

		Segment registers:
			CS, DS, ES, FS, GS, SS

		Index and pointers:
			ESI, EDI, EBP, EIP, ESP
			
			
		8-bit-Register werden als Words oder Shorts, 16-bit als int und 32-bit als long bezeichnet.
		 
		 
		 
		 
2	Was bedeuten die folgenden Pseudo-Anweisungen
	>> .data. .bss, .text, .byte, .hword, .long, .int, .ascii, .asciz, .lcomm,

	
		Diese Anweisungen informieren den Assembler darueber, wie die auf sie folgenden Code-Stuecke behandelt werden sollen.
		
			.byte, .hword, .long, .int, .ascii und .asciz reservieren jeweils Speicherplatz fuer eine reihe von bytes, shorts,
			longs, ints, ascii-code und	ascii-code mit null am ende. Die Laenge dieses Speicherplatzes haengt von der Anzahl
			der folgenden Argumente ab.
	
	
			.lcomm erlaubt die Reservierung von beliebig vielen Bytes.	
	
	
			.data, .bss und .text markieren verschiedene Segmente des assembler-sourcecodes. In data und bss werden Symbole deklariert
			und	Speicher zugewiesen (Symbole in bss sind zu beginn eines Programmes immer 0), .text beinhaltet Prozessoranweisungen und
			damit den Ablauf des Programmes.
		
		
		
		
		
		
3	Was bedeutet die folgende Zeile: 
	>>.global _start, demofunc


		.global macht die folgenden Symbole fuer alle in der ausfuehrbaren Datei gelinkten Elemente sichtbar.
		_start ist anscheinend das Symbol, das bei Benutzung einer ausfuehrbaren Datei zuerst aufgerufen wird.
		
		
		
		
4	Übersetzen Sie die folgende Anweisung in Maschinencode:
	>> str1:  .asciz  "SYSPROG"
	
		Laut Listfile ist der Maschinencode dieser Zeile:
			53 59 53 50 52 4F 47 00
	
	
	
5	GNU Assembler Manual

	...
	
	
	
6 	Adressierungsarten üben:

		a Mit dem Makefile können Sie das Programm übersetzen. Im Makefile sind Optionen an den Assembler und Linker enthalten,
		  die sogenannte Listings erzeugen. Im Listing main.lst finden Sie die erzeugten Maschinenbefehle. Wie lang sind die
		  einzelnen Befehle?

			Jeweils 8 bit fuer die Instruktion und dann bis zu 32 bit fuer die benutzten Werte. Es scheint Spezialfaelle fuer Instruktionen
			zu geben (zB nimmt movl verschiedene Werte an abhaengig vom Zielregister).
		
		b Ist "movl %eax, %ebx" ein gültiger Befehl?

			Ja, er kopiert die volle 32-Bit Registerbreite von eax nach ebx.
		
		
		c Ist "movl (%eax), (%ebx)" ein gültiger Befehl?
		
			Der Befehl klingt gueltig ("kopiere wert an speicheraddresse in eax zur speicheraddresse in ebx"), allerdings kompiliert
			die codezeile nicht ("too many memory references for 'mov'") - mov kann keine direkten Operationen zwischen 2 Speicheraddressen
			ausfuehren. Einer der Werte muss also zwischengespeichert werden.
			
			
		
	
7 	Bedingte Sprünge

	Schreiben Sie ein kleines Programm, mit dem Sie testen können, ob ein Sprung genommen wurde oder nicht. Der
	Exit-Code des Programms sollte darüber Auskunft erteilen. Experimentieren Sie mit verschiedenen Werten für
    eax, die Konstante im cmpl Befehl und den Sprung. Nehmen Sie auch negative Werte!

		.section .text
		.globl _start
	
		_start:
		 movl $5, %eax
		 cmpl $0, %eax
		 je exit1
		
		 movl $0, %eax
		 cmpl $-1, %eax
		 jl exit2
		
		 jg cont
		 jmp exitDefault
		
		cont:
		 movl $5, %eax
		 cmpl $5, %eax
		 jge exit3
		
		exitDefault:
		 movl $1, %eax
		 movl $0, %ebx
		 int $0x80

		 
		 
		exit1:
		 movl $1, %eax
		 movl $1, %ebx
		 int $0x80
		 
		exit2:
		 movl $1, %eax
		 movl $2, %ebx
		 int $0x80
		 
		exit3:
		 movl $1, %eax
		 movl $3, %ebx
		 int $0x80



	

8	Entfernen Sie das _start Label bei einem Programm und untersuchen Sie, was dann beim Assemblieren passiert. Verändern Sie in einem
	zweiten Schritt den Namen dieses Labels.

		ld braucht _start, um den Eingangspunkt des Programms festzustellen. Gibt es _start nicht oder ist es kein
		globales Label, wird ein Standardwert benutzt.

	
	
	
**********************
				002
**********************

(Kopie der Abgabe letzter Woche)

USE THE CONCEPTS:

Modify the first program to return 3:
    Just move $3 into %ebx right before the system call.
 
Modify maximum to find the minimum:
    Change the conditional jump in line 24 to jump if the current temp value
    is smaller or equal instead of greater or equal to the one in %ebx.
 
Modify maximum to use 255 to end the list:
    Replace the last element of the list with 0xFF, then change the conditional
    termination in line 19 to "cmpl $0xFF, %eax"
 
Modify to use an ending address rather than the number 0:
    
    Paste the following into the starting paragraph right into the '_start:' label section:
	
        leal    data_items, %ecx
        addl    $20, %ecx
		
    This will keep the address of the first byte after the list in %ecx.
    The conditional termination part (cmpl $value, %eax) gets replaced by:
	
        leal    data_items(, %edi, 4), %edx
        cmpl    %edx, %ecx
        je      end_loop
		
    This way, the program terminates as soon as data_items(, %edi, 4) points
    to the address after the lists last byte.
    

Modify to use a length count instead:
    Replace the conditional termination part with:
        cmpl    $5, %edi
        jge     end_loop
 
What would the instruction movl _start, %eax do?
    It would load the first long (=4 bytes) at the memory address of _start into %eax.
 
How would this differ from movl $_start, %eax?
    The "$" would prevent the symbols address from being resolved and load
    the address number into the register instead.
	
	
	

**********************
				003
**********************

....